package com.packt.jdeveloper.cookbook.hr.components.model.view;

import com.packt.jdeveloper.cookbook.hr.components.model.entity.DepartmentImpl;
import com.packt.jdeveloper.cookbook.shared.bc.extensions.ExtViewRowImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jun 11 21:23:56 EEST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DepartmentsRowImpl extends ExtViewRowImpl {

    public static final int ENTITY_DEPARTMENT = 0;
    private static final int MAX_EMPLOYEES_UPDATE = 5;

    public boolean isAttributeUpdateable(int prameterIdx) {
        // get the number of employees for the specific department
        int departmentEmployeeCount = this.getEmployees() != null ? this.getEmployees().getRowCount() : 0;
        // set all attributes to non-updatable if the department has more than a specified number of employees
        return (departmentEmployeeCount > MAX_EMPLOYEES_UPDATE) ? false : super.isAttributeUpdateable(prameterIdx);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DepartmentId {
            public Object get(DepartmentsRowImpl obj) {
                return obj.getDepartmentId();
            }

            public void put(DepartmentsRowImpl obj, Object value) {
                obj.setDepartmentId((Number)value);
            }
        }
        ,
        DepartmentName {
            public Object get(DepartmentsRowImpl obj) {
                return obj.getDepartmentName();
            }

            public void put(DepartmentsRowImpl obj, Object value) {
                obj.setDepartmentName((String)value);
            }
        }
        ,
        ManagerId {
            public Object get(DepartmentsRowImpl obj) {
                return obj.getManagerId();
            }

            public void put(DepartmentsRowImpl obj, Object value) {
                obj.setManagerId((Number)value);
            }
        }
        ,
        LocationId {
            public Object get(DepartmentsRowImpl obj) {
                return obj.getLocationId();
            }

            public void put(DepartmentsRowImpl obj, Object value) {
                obj.setLocationId((Number)value);
            }
        }
        ,
        IsNewRow {
            public Object get(DepartmentsRowImpl obj) {
                return obj.getIsNewRow();
            }

            public void put(DepartmentsRowImpl obj, Object value) {
                obj.setIsNewRow((Boolean)value);
            }
        }
        ,
        Employees {
            public Object get(DepartmentsRowImpl obj) {
                return obj.getEmployees();
            }

            public void put(DepartmentsRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DepartmentsRowImpl object);

        public abstract void put(DepartmentsRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DEPARTMENTID = AttributesEnum.DepartmentId.index();
    public static final int DEPARTMENTNAME = AttributesEnum.DepartmentName.index();
    public static final int MANAGERID = AttributesEnum.ManagerId.index();
    public static final int LOCATIONID = AttributesEnum.LocationId.index();
    public static final int ISNEWROW = AttributesEnum.IsNewRow.index();
    public static final int EMPLOYEES = AttributesEnum.Employees.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DepartmentsRowImpl() {
    }

    /**
     * Gets Department entity object.
     * @return the Department
     */
    public DepartmentImpl getDepartment() {
        return (DepartmentImpl)getEntity(ENTITY_DEPARTMENT);
    }

    /**
     * Gets the attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @return the DEPARTMENT_ID
     */
    public Number getDepartmentId() {
        return (Number)getAttributeInternal(DEPARTMENTID);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPARTMENT_ID using the alias name DepartmentId.
     * @param value value to set the DEPARTMENT_ID
     */
    public void setDepartmentId(Number value) {
        setAttributeInternal(DEPARTMENTID, value);
    }

    /**
     * Gets the attribute value for DEPARTMENT_NAME using the alias name DepartmentName.
     * @return the DEPARTMENT_NAME
     */
    public String getDepartmentName() {
        return (String)getAttributeInternal(DEPARTMENTNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for DEPARTMENT_NAME using the alias name DepartmentName.
     * @param value value to set the DEPARTMENT_NAME
     */
    public void setDepartmentName(String value) {
        setAttributeInternal(DEPARTMENTNAME, value);
    }

    /**
     * Gets the attribute value for MANAGER_ID using the alias name ManagerId.
     * @return the MANAGER_ID
     */
    public Number getManagerId() {
        return (Number)getAttributeInternal(MANAGERID);
    }

    /**
     * Sets <code>value</code> as attribute value for MANAGER_ID using the alias name ManagerId.
     * @param value value to set the MANAGER_ID
     */
    public void setManagerId(Number value) {
        setAttributeInternal(MANAGERID, value);
    }

    /**
     * Gets the attribute value for LOCATION_ID using the alias name LocationId.
     * @return the LOCATION_ID
     */
    public Number getLocationId() {
        return (Number)getAttributeInternal(LOCATIONID);
    }

    /**
     * Sets <code>value</code> as attribute value for LOCATION_ID using the alias name LocationId.
     * @param value value to set the LOCATION_ID
     */
    public void setLocationId(Number value) {
        setAttributeInternal(LOCATIONID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute IsNewRow.
     * @return the IsNewRow
     */
    public Boolean getIsNewRow() {
        // return true if the row status is New
        return Row.STATUS_NEW == this.getDepartment().getEntityState();
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute IsNewRow.
     * @param value value to set the  IsNewRow
     */
    public void setIsNewRow(Boolean value) {
        setAttributeInternal(ISNEWROW, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link Employees.
     */
    public RowIterator getEmployees() {
        return (RowIterator)getAttributeInternal(EMPLOYEES);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
